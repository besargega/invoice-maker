{"ast":null,"code":"var _classCallCheck = require(\"/home/besargega/Documents/react-invoice-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/besargega/Documents/react-invoice-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar inflate = require('tiny-inflate');\nvar _require = require('./swap'),\n  swap32LE = _require.swap32LE;\n\n// Shift size for getting the index-1 table offset.\nvar SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nvar SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nvar SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nvar OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nvar INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nvar INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nvar INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nvar DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nvar DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nvar LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nvar LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nvar INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nvar UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nvar UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nvar INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nvar DATA_GRANULARITY = 1 << INDEX_SHIFT;\nvar UnicodeTrie = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function UnicodeTrie(data) {\n    _classCallCheck(this, UnicodeTrie);\n    var isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      var uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        var view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      // pre-parsed data\n      var _data = data;\n      this.data = _data.data;\n      this.highStart = _data.highStart;\n      this.errorValue = _data.errorValue;\n    }\n  }\n  _createClass(UnicodeTrie, [{\n    key: \"get\",\n    value: function get(codePoint) {\n      var index;\n      if (codePoint < 0 || codePoint > 0x10ffff) {\n        return this.errorValue;\n      }\n      if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {\n        // Ordinary BMP code point, excluding leading surrogates.\n        // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n        // data is stored in the index array itself.\n        index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n        return this.data[index];\n      }\n      if (codePoint <= 0xffff) {\n        // Lead Surrogate Code Point.  A Separate index section is stored for\n        // lead surrogate code units and code points.\n        //   The main index has the code unit data.\n        //   For this function, we need the code point data.\n        index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n        return this.data[index];\n      }\n      if (codePoint < this.highStart) {\n        // Supplemental code point, use two-level lookup.\n        index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n        index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n        index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n        return this.data[index];\n      }\n      return this.data[this.data.length - DATA_GRANULARITY];\n    }\n  }]);\n  return UnicodeTrie;\n}();\nmodule.exports = UnicodeTrie;","map":{"version":3,"names":["inflate","require","_require","swap32LE","SHIFT_1","SHIFT_2","SHIFT_1_2","OMITTED_BMP_INDEX_1_LENGTH","INDEX_2_BLOCK_LENGTH","INDEX_2_MASK","INDEX_SHIFT","DATA_BLOCK_LENGTH","DATA_MASK","LSCP_INDEX_2_OFFSET","LSCP_INDEX_2_LENGTH","INDEX_2_BMP_LENGTH","UTF8_2B_INDEX_2_OFFSET","UTF8_2B_INDEX_2_LENGTH","INDEX_1_OFFSET","DATA_GRANULARITY","UnicodeTrie","data","_classCallCheck","isBuffer","readUInt32BE","slice","Uint8Array","uncompressedLength","highStart","readUInt32LE","errorValue","view","DataView","buffer","getUint32","subarray","Uint32Array","_data","_createClass","key","value","get","codePoint","index","length","module","exports"],"sources":["/home/besargega/Documents/react-invoice-generator/node_modules/unicode-trie/index.js"],"sourcesContent":["const inflate = require('tiny-inflate');\nconst { swap32LE } = require('./swap');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;"],"mappings":"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"},"metadata":{},"sourceType":"script"}